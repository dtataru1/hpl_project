# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Parameters.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import matplotlib
import numpy as np
import csv
from PyQt5 import QtCore, QtWidgets

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

matplotlib.use('Qt5Agg')



class MplCanvas(FigureCanvas):

    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111, ybound=(-1000,0))
        super(MplCanvas, self).__init__(fig)


class Ui_Form(object):
    def setupUi(self, Form, graph):
        Form.setObjectName("Form")
        Form.resize(1000, 600)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(10, 10, 91, 31))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(10, 40, 61, 21))
        self.label_2.setObjectName("label_2")
        self.horizontalSlider = QtWidgets.QSlider(Form)
        self.horizontalSlider.setGeometry(QtCore.QRect(10, 60, 160, 21))
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(10, 100, 81, 21))
        self.label_3.setObjectName("label_3")
        self.horizontalSlider_2 = QtWidgets.QSlider(Form)
        self.horizontalSlider_2.setGeometry(QtCore.QRect(10, 120, 160, 21))
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(10, 160, 101, 21))
        self.label_4.setObjectName("label_4")
        self.dial = QtWidgets.QDial(Form)
        self.dial.setGeometry(QtCore.QRect(50, 183, 71, 81))
        self.dial.setMaximum(359)
        self.dial.setPageStep(10)
        self.dial.setWrapping(True)
        self.dial.setNotchesVisible(True)
        self.dial.setObjectName("dial")

        self.widget = QtWidgets.QWidget(Form)
        self.widget.setGeometry(100,0,900,600)
        layout = QtWidgets.QVBoxLayout(self.widget)

        self.canvas = graph
        self.canvas.setGeometry(QtCore.QRect(200, 10, 431, 251))

        # self.canvas.xdata = np.linspace(1,14,14)
        # self.canvas.ydata = np.zeros(14)
        # self.canvas.show()
        # self.window = 0
        # self.isolation = 0
        # self.orientation = 0
        #self.horizontalSlider.valueChanged['int'].connect(lambda state: self.update_plot(state))
        #self.horizontalSlider_2.valueChanged['int'].connect(lambda state: self.update_plot(state,1))
        #self.dial.valueChanged['int'].connect(lambda state: self.update_plot(state,2))


        layout.addWidget(self.canvas)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        return self.horizontalSlider, self.horizontalSlider_2, self.dial

    # def heat_loss_wall(self, T_out, T_in, A_wall, e_wall, Th_cond_wall):
    #     U_wall = Th_cond_wall / e_wall
    #     Q_loss = U_wall * A_wall * (T_out - T_in)
    #     return Q_loss

    # # Computing total energy loss [J] from heat loss information
    # def energy_loss_wall(self, Q, timestep):
    #     E_loss = 0
    #     for i in range(0, len(Q) - 1):
    #         E_loss = E_loss + (Q[i] + Q[i + 1]) / 2 * timestep
    #     return E_loss

    # def update_plot(self, e_wall):
    #     # Reading csv temperature data
    #     e_wall /= 100
    #     e_wall += 0.01
    #     T_file = open('geneva_temperature_2weeks.csv')
    #     T_csvreader = csv.reader(T_file)
    #     next(T_csvreader)
    #     T_out = []
    #     for row in T_csvreader:
    #         T_out.append(row)
    #     T_out = np.reshape(np.array(T_out, dtype=np.float32), len(T_out))

    #     # Constants
    #     T_in = 20  # K, inside desired temperature (assumed constant)
    #     A_wall = 40  # m^2, Wall surface area in contact with outside
    #     timestep = 3600 * 24  # 1-hour timestep between temperature data points
    #     J2kwh = 2.77778 * 10 ** (-7)  # Conversion coefficient between J and kWh
    #     Th_cond_wall = 2.25  # W/m/K, concrecte wall themrla Conductivity

    #     # Running the simulation
    #     Q_loss = self.heat_loss_wall(T_out, T_in, A_wall, e_wall, Th_cond_wall)
    #     E_loss = np.zeros(14)

    #     for i in range(len(Q_loss) - 1):
    #         E_loss[i] = (self.energy_loss_wall(Q_loss[i:i + 2], timestep))
    #     E_loss = E_loss * J2kwh

    #     self.canvas.ydata = E_loss
    #     self.canvas.axes.cla()
    #     self.canvas.axes.plot(self.canvas.xdata, self.canvas.ydata)
    #     self.canvas.axes.set_ybound(-1000, 0)
    #     self.canvas.draw()

    #def update_plot(self,c,who):
    #    if who == 0:
    #        self.window = c
    #    if who == 1:
    #        self.isolation = c
    #    if who == 2:
    #        self.orientation = c

    #    self.canvas.ydata = (self.isolation*(self.canvas.xdata**2) + self.window) + np.exp(self.orientation/180)
    #    self.canvas.axes.cla()  # Clear the canvas.
    #    self.canvas.axes.plot(self.canvas.xdata, self.canvas.ydata, 'r')
    #    self.canvas.axes.set_ybound(-40, 40)
            # Trigger the canvas to update and redraw.
    #    self.canvas.draw()



    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "PARAMETERS"))
        self.label_2.setText(_translate("Form", "Windows"))
        self.label_3.setText(_translate("Form", "Isolation"))
        self.label_4.setText(_translate("Form", "Orientation"))


class Window(QtWidgets.QMainWindow, Ui_Form):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.show()


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    win = Window()
    sys.exit(app.exec())
